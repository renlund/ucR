%\VignetteEngine{knitr::knitr}
%\VignetteIndexEntry{How to use 'reFactor' (knitr produced documentation)}
\documentclass{article}

<<cache=FALSE, echo=FALSE, include=FALSE>>=
library(ucR)
set.seed(19790424)
@


\title{reFactor}
\author{Henrik Renlund}
\newcommand{\code}{\texttt}

\begin{document}
\maketitle
\tableofcontents

\section{Purpose}
The function\footnote{The name \code{relevel} was taken!} \code{reFactor} was build mainly to be able to easily rename, reorder, and merge the levels of a factor. It can also create and exclude levels, and set \code{NA} to be a level.

Motivating example:
<<motivating_example>>=
lev <- c(" ", "never", "some", "a lot")
smoking <- factor(sample(x=lev, 100, TRUE), levels=lev)
table(smoking)
@
Suppose you would want to clean up the variable \code{smoking} to have only levels "no" (previously 'never'), "yes" (previously 'some' and 'a lot') and "unknown" (previously ' ')  - and in that order.
<<solution>>=
L <- list(never="no", some=c("yes", "a lot"), " "="unknown")
table(reFactor(smoking, L))
@

\section{Basic functionality}

\subsection{Renaming and reordering levels}
Levels can be renamed by providing a list with entries of the old level name that equals a new name.
<<basic_rename>>=
(x <- factor(LETTERS[1:2]))
L <- list(A="newA", B="newB")
reFactor(x,L)
@
The order of the list determines the order of the levels created.
<<basic_rename_reorder>>=
(x <- factor(LETTERS[1:2], levels=LETTERS[2:1]))
L <- list(A="newA", B="newB")
reFactor(x,L)
@
If you simply want to reorder you must provide a \code{NULL} new name.
<<basic_reorder>>=
(x <- factor(LETTERS[1:3]))
L <- list(B=NULL, A=NULL, C=NULL)
reFactor(x,L)
@
The list \code{L} need not cover all existing levels. If not, the remaining levels will be added in the same order as they appeared in the original.
<<basic_reorder_incomplete>>=
(x <- factor(LETTERS[1:5]))
L <- list(D=NULL, B="newB")
reFactor(x,L)
@
\subsection{Adding and merging levels}
If \code{L} includes a non-existing level, this level will be added.
<<new_level>>=
(x <- factor(LETTERS[1:2]))
L <- list(Foo=NULL)
reFactor(x,L)
@
There is an option to put these new levels at the end of the levels created.
<<new_level_last>>=
(x <- factor(LETTERS[1:2]))
L <- list(Foo=NULL, Bar=NULL)
reFactor(x,L, new.last=TRUE)
@
If you want to merge two levels this can be acheived by including one in the other, as is best shown by example:
<<merge_levels>>=
(x <- factor(LETTERS[1:3]))
L <- list(A="B") # level B to be absorbed by level A
reFactor(x,L)
@
Note that the above did not rename \code{A} as \code{B}. The entry \code{A} in list \code{L} can contain a new name as well as levels to be absorbed. Thus it cannot be renamed as an existing level.
<<merge_levels_new_name>>=
(x <- factor(LETTERS[1:3]))
L <- list(A=c("merge_AB", "B"))
reFactor(x,L)
@
The same thing can be acheived by
<<merge_levels_new_name_alt>>=
(x <- factor(LETTERS[1:3]))
L <- list(B=c("merge_AB", "A"))
reFactor(x,L)
@
The order of entry \code{B} is unimportant, but the first non-level name will be used as a new name.
<<merge_levels_new_name_alt2>>=
(x <- factor(LETTERS[1:3]))
L <- list(B=c("A", "merger", "new_name"))
reFactor(x,L)
@
One cannot merge an existing level into more than one place, the first encountered will be used.
<<merge_levels_new_name_semifail>>=
(x <- factor(LETTERS[1:3]))
L <- list(B=c("merge_AB","A"), C=c("new_C", "A"))
reFactor(x,L)
@

\subsection{The empty string}
One cannot specify the element name in a list explicitly to be the empty string
<<>>=
# list(a_name="value", ""="another_value") # not possible
list(a_name="value", "another_value") # possible
@
Therefore, if you want to recode a empty string value can do
<<>>=
x <- c("A", "", "B")
L <- list("A"="New A", "not_so_empty_now", "B"="New B")
reFactor(x, L)
@



\subsection{Excluding and adding \code{NA} as level}
You can delete levels, i.e.\ turning it into \code{NA}.
<<exclude>>=
(x <- factor(LETTERS[1:4]))
reFactor(x,exclude=c("A","C"))
@
You can make \code{NA} into a level \code{missing} by setting \code{na.level} to any non null value
<<na_level>>=
(x <- factor(c(LETTERS[1:2],NA)))
reFactor(x,na.level=TRUE)
@
or specify any name by setting \code{na.level} to a string
<<na_level_new_name>>=
(x <- factor(c(LETTERS[1:2],NA)))
reFactor(x,na.level="saknas")
@

\section{Order of operations}
The function operates in the following order:
\begin{itemize}
\item if wanted, turn \code{NA} into a level
\item if wanted, turn certain levels into \code{NA}
\item if wanted, rename and reorder levels
\end{itemize}
Thus you can delete levels whilst making original \code{NA} into a new level.
<<complex_1>>=
(x <- factor(c(LETTERS[1:2],NA)))
reFactor(x, exclude="A", na.level=TRUE)
@
But would you want to consider both \code{A} and \code{NA} as \code{missing} you would have to 'rename' \code{NA} and let that name be absorbed by \code{A} which takes the new name 'missing'.
<<complex_2>>=
(x <- factor(c(LETTERS[1:2],NA)))
L <- list(A=c("missing", "NA_name"))
reFactor(x, L, na.level="NA_name")
@




\end{document}